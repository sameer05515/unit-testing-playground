{"version":3,"file":"custom/use-case-to-learn-promise/use-case-just-chain-promises-0.1.js","mappings":";;;;AAAA,IAAMA,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;AAC5CF,GAAG,CAACG,SAAS,GAAG,UAAU;AAC1B,IAAIC,KAAK,GAAG,CAAC;AACb,IAAIC,IAAI,GAAG,CAAC;AACZ,IAAIC,OAAO,GAAG,KAAK;AAEnB,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,GAAG,EAAEC,WAAW,EAAK;EACrCC,OAAO,CAACC,GAAG,CAACF,WAAW,EAAED,GAAG,CAAC;EAC7BH,IAAI,EAAE;EACN,OAAOG,GAAG;AACZ,CAAC;AAED,IAAMI,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIJ,GAAG,EAAEK,OAAO,EAAEJ,WAAW,EAAK;EACvD,IAAID,GAAG,GAAGK,OAAO,KAAK,CAAC,EAAE;IACvB,MAAM,IAAIC,KAAK,mCAAAC,MAAA,CAAmCP,GAAG,uBAAAO,MAAA,CAAoBF,OAAO,CAAE,CAAC;EACrF;EACA,OAAON,QAAQ,CAACC,GAAG,EAAEC,WAAW,CAAC;AACnC,CAAC;AAED,IAAMO,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACzBN,OAAO,CAACO,KAAK,CAAC,CAAC;EACfP,OAAO,CAACC,GAAG,WAAAI,MAAA,CAAWX,KAAK,CAAE,CAAC;EAE9B,IAAIc,OAAO,CAAC,UAACC,OAAO;IAAA,OAAKA,OAAO,CAACf,KAAK,CAAC;EAAA,EAAC,CACrCgB,IAAI,CAAC,UAACZ,GAAG;IAAA,OAAKD,QAAQ,CAACC,GAAG,GAAG,CAAC,EAAE,iBAAiB,CAAC;EAAA,EAAC,CACnDY,IAAI,CAAC,UAACZ,GAAG;IAAA,OAAKI,iBAAiB,CAACJ,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,uBAAuB,CAAC;EAAA,EAAC,CACrEY,IAAI,CAAC,UAACZ,GAAG;IAAA,OAAKI,iBAAiB,CAACJ,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC;EAAA,EAAC,CAC/DY,IAAI,CAAC,UAACZ,GAAG;IAAA,OAAKD,QAAQ,CAACC,GAAG,GAAG,CAAC,EAAE,oBAAoB,CAAC;EAAA,EAAC,CACtDY,IAAI,CAAC,UAACZ,GAAG,EAAK;IACbE,OAAO,CAACC,GAAG,CAACH,GAAG,EAAEA,GAAG,KAAKJ,KAAK,CAAC;IAC/BE,OAAO,GAAG,IAAI;EAChB,CAAC,CAAC,SACI,CAAC,UAACe,GAAG;IAAA,OAAKX,OAAO,CAACY,KAAK,CAACD,GAAG,CAAC;EAAA,EAAC,WAC3B,CAAC,YAAM;IACb,IAAIf,OAAO,EAAE;MACXI,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IAC3B,CAAC,MAAM;MACLD,OAAO,CAACY,KAAK,wBAAAP,MAAA,CAAwBV,IAAI,CAAE,CAAC;IAC9C;IACAD,KAAK,IAAI,CAAC;IACVE,OAAO,GAAG,KAAK,CAAC,CAAC;IACjBD,IAAI,GAAG,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACN,CAAC;AAEDL,GAAG,CAACuB,gBAAgB,CAAC,OAAO,EAAEP,YAAY,CAAC;AAC3Cf,QAAQ,CAACuB,IAAI,CAACC,WAAW,CAACzB,GAAG,CAAC,C","sources":["webpack://dependency-injection-practice-with-es6-modules-and-webpack-dev-server/./src/scripts/custom/use-case-to-learn-promise/use-case-just-chain-promises-0.1.js"],"sourcesContent":["const btn = document.createElement(\"button\");\r\nbtn.innerText = \"Click Me\";\r\nlet value = 1;\r\nlet step = 1;\r\nlet success = false;\r\n\r\nconst logValue = (val, stepMessage) => {\r\n  console.log(stepMessage, val);\r\n  step++;\r\n  return val;\r\n};\r\n\r\nconst checkDivisibility = (val, divisor, stepMessage) => {\r\n  if (val % divisor === 0) {\r\n    throw new Error(`Failed as my calculated value: ${val} is divisible by ${divisor}`);\r\n  }\r\n  return logValue(val, stepMessage);\r\n};\r\n\r\nconst clickHandler = () => {\r\n  console.clear();\r\n  console.log(`value: ${value}`);\r\n\r\n  new Promise((resolve) => resolve(value))\r\n    .then((val) => logValue(val + 6, \"After addition:\"))\r\n    .then((val) => checkDivisibility(val * 2, 4, \"After multiplication:\"))\r\n    .then((val) => checkDivisibility(val / 2, 3, \"After division:\"))\r\n    .then((val) => logValue(val - 6, \"After subtraction:\"))\r\n    .then((val) => {\r\n      console.log(val, val === value);\r\n      success = true;\r\n    })\r\n    .catch((err) => console.error(err))\r\n    .finally(() => {\r\n      if (success) {\r\n        console.log(\"Job done!!\");\r\n      } else {\r\n        console.error(`Job failed in step: ${step}`);\r\n      }\r\n      value += 1;\r\n      success = false; // Reset success flag for next click\r\n      step = 1; // Reset step counter for next click\r\n    });\r\n};\r\n\r\nbtn.addEventListener(\"click\", clickHandler);\r\ndocument.body.appendChild(btn);\r\n"],"names":["btn","document","createElement","innerText","value","step","success","logValue","val","stepMessage","console","log","checkDivisibility","divisor","Error","concat","clickHandler","clear","Promise","resolve","then","err","error","addEventListener","body","appendChild"],"sourceRoot":""}
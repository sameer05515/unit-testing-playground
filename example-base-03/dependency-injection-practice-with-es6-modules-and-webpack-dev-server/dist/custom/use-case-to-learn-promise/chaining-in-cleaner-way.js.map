{"version":3,"file":"custom/use-case-to-learn-promise/chaining-in-cleaner-way.js","mappings":"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","sources":["webpack://dependency-injection-practice-with-es6-modules-and-webpack-dev-server/./src/scripts/custom/use-case-to-learn-promise/chaining-in-cleaner-way.js"],"sourcesContent":["const btn = document.createElement(\"button\");\r\nbtn.innerText = \"Fetch Data\";\r\nlet step = 1;\r\nlet success = false;\r\n\r\nconst logValue = (val, stepMessage) => {\r\n  console.log(stepMessage, val);\r\n  step++;\r\n  return val;\r\n};\r\n\r\nconst handleError = (err, stepMessage) => {\r\n  console.error(stepMessage, err);\r\n  throw err;\r\n};\r\n\r\nconst fetchUserData = () => {\r\n  return fetch('https://jsonplaceholder.typicode.com/users/1')\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => logValue(data, \"User data:\"))\r\n    .catch(err => handleError(err, \"Error in fetching user data:\"));\r\n};\r\n\r\nconst fetchUserPosts = (user) => {\r\n  return fetch(`https://jsonplaceholder.typicode.com/posts?userId=${user.id}`)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user posts');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(posts => logValue(posts, \"User posts:\"))\r\n    .catch(err => handleError(err, \"Error in fetching user posts:\"));\r\n};\r\n\r\nconst fetchPostComments = (posts) => {\r\n  return fetch(`https://jsonplaceholder.typicode.com/comments?postId=${posts[0].id}`)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch post comments');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(comments => logValue(comments, \"Post comments:\"))\r\n    .catch(err => handleError(err, \"Error in fetching post comments:\"));\r\n};\r\n\r\nconst clickHandler = () => {\r\n  console.clear();\r\n\r\n  fetchUserData()\r\n    .then(user => fetchUserPosts(user))\r\n    .then(posts => fetchPostComments(posts))\r\n    .then(comments => {\r\n      console.log(\"All fetch operations succeeded\");\r\n      success = true;\r\n    })\r\n    .catch((err) => console.error(err))\r\n    .finally(() => {\r\n      if (success) {\r\n        console.log(\"Job done!!\");\r\n      } else {\r\n        console.error(`Job failed in step: ${step}`);\r\n      }\r\n      success = false; // Reset success flag for next click\r\n      step = 1; // Reset step counter for next click\r\n    });\r\n};\r\n\r\nbtn.addEventListener(\"click\", clickHandler);\r\ndocument.body.appendChild(btn);\r\n"],"names":["btn","document","createElement","innerText","step","success","logValue","val","stepMessage","console","log","handleError","err","error","fetchUserData","fetch","then","response","ok","Error","json","data","fetchUserPosts","user","concat","id","posts","fetchPostComments","comments","clickHandler","clear","addEventListener","body","appendChild"],"sourceRoot":""}
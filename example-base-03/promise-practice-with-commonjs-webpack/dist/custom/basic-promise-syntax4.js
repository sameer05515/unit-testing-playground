/******/ (() => { // webpackBootstrap
/*!*****************************************************!*\
  !*** ./src/scripts/custom/basic-promise-syntax4.js ***!
  \*****************************************************/
(function () {
  console.log('Initialization code runs');
  // Initialization code here
  // Create style element
  var style = document.createElement("style");
  style.type = "text/css";
  style.innerHTML = "\n    // .message-ball {\n    //     font-size: 20px;\n    //     line-height: 400px;\n    //     text-align: center;\n    // }\n    .circle {\n        transition-property: width, height;\n        transition-duration: 5s;\n        position: fixed;\n        transform: translateX(-50%) translateY(-50%);\n        background-color: red;\n        border-radius: 50%;\n    }\n";

  // Append style element to the head
  document.head.appendChild(style);
  var defaultCircleValues = {
    radius: 100,
    leftPadding: 70,
    topPadding: 70
  };
  function check() {
    var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultCircleValues.radius;
    var leftPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCircleValues.leftPadding;
    var topPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCircleValues.topPadding;
    showCircle(radius + leftPadding, radius + topPadding, radius).then(function (div) {
      //div.classList.add('message-ball');
      div.style.fontSize = "20px";
      div.style.lineHeight = "".concat(radius * 2, "px");
      div.style.textAlign = "center";
      div.append("Hello, world!");
    });
  }
  function showCircle(cx, cy, radius) {
    var div = document.createElement("div");
    div.style.width = 0;
    div.style.height = 0;
    div.style.left = cx + "px";
    div.style.top = cy + "px";
    div.className = "circle";
    document.body.append(div);
    return new Promise(function (resolve) {
      setTimeout(function () {
        div.style.width = radius * 2 + "px";
        div.style.height = radius * 2 + "px";
        div.addEventListener("transitionend", function handler() {
          div.removeEventListener("transitionend", handler);
          resolve(div);
        });
      }, 0);
    });
  }

  // Creating controles

  var myContainerDiv = document.createElement('div');

  // Create radius input element
  var radiusInputEl = document.createElement("input");
  radiusInputEl.type = "text";
  radiusInputEl.id = "radiusInputElId";
  radiusInputEl.placeholder = "Enter radius {Default value is: 100}";

  // Create radius input element
  var leftPaddingInputEl = document.createElement("input");
  leftPaddingInputEl.type = "text";
  leftPaddingInputEl.id = "leftPaddingInputElId";
  leftPaddingInputEl.placeholder = "Enter Left Padding {Default value is: 50}";

  // Create radius input element
  var topPaddingInputEl = document.createElement("input");
  topPaddingInputEl.type = "text";
  topPaddingInputEl.id = "topPaddingInputElId";
  topPaddingInputEl.placeholder = "Enter Top Padding {Default value is: 50}";

  // Create button element
  var button = document.createElement("button");
  button.innerText = "Click me";
  button.onclick = function () {
    var radius = +document.getElementById("radiusInputElId").value || defaultCircleValues.radius;
    var leftPadding = +document.getElementById("leftPaddingInputElId").value || defaultCircleValues.leftPadding;
    var topPadding = +document.getElementById("topPaddingInputElId").value || defaultCircleValues.topPadding;
    console.log("radius: ".concat(radius, ", leftPadding: ").concat(leftPadding, ", topPadding: ").concat(topPadding));
    check(radius, leftPadding, topPadding);
  };
  myContainerDiv.appendChild(radiusInputEl);
  myContainerDiv.appendChild(document.createElement('br'));
  myContainerDiv.appendChild(leftPaddingInputEl);
  myContainerDiv.appendChild(document.createElement('br'));
  myContainerDiv.appendChild(topPaddingInputEl);
  myContainerDiv.appendChild(document.createElement('br'));
  myContainerDiv.appendChild(button);
  document.body.appendChild(myContainerDiv);
})();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,